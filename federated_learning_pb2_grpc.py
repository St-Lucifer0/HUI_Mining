# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import federated_learning_pb2 as federated__learning__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in federated_learning_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class FederatedLearningServiceStub(object):
    """Service definition for federated learning
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterClient = channel.unary_unary(
                '/federated_learning.FederatedLearningService/RegisterClient',
                request_serializer=federated__learning__pb2.ClientRegistration.SerializeToString,
                response_deserializer=federated__learning__pb2.RegistrationResponse.FromString,
                _registered_method=True)
        self.SendLocalResults = channel.unary_unary(
                '/federated_learning.FederatedLearningService/SendLocalResults',
                request_serializer=federated__learning__pb2.LocalResults.SerializeToString,
                response_deserializer=federated__learning__pb2.ServerAcknowledgment.FromString,
                _registered_method=True)
        self.GetGlobalResults = channel.unary_unary(
                '/federated_learning.FederatedLearningService/GetGlobalResults',
                request_serializer=federated__learning__pb2.GlobalResultsRequest.SerializeToString,
                response_deserializer=federated__learning__pb2.GlobalResults.FromString,
                _registered_method=True)
        self.BroadcastGlobalModel = channel.unary_unary(
                '/federated_learning.FederatedLearningService/BroadcastGlobalModel',
                request_serializer=federated__learning__pb2.GlobalModel.SerializeToString,
                response_deserializer=federated__learning__pb2.ClientAcknowledgment.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/federated_learning.FederatedLearningService/HealthCheck',
                request_serializer=federated__learning__pb2.HealthRequest.SerializeToString,
                response_deserializer=federated__learning__pb2.HealthResponse.FromString,
                _registered_method=True)


class FederatedLearningServiceServicer(object):
    """Service definition for federated learning
    """

    def RegisterClient(self, request, context):
        """Client registers with the server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendLocalResults(self, request, context):
        """Client sends local high-utility itemsets to server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGlobalResults(self, request, context):
        """Client requests global aggregated results
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BroadcastGlobalModel(self, request, context):
        """Server broadcasts global model to clients
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Health check
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FederatedLearningServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterClient': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterClient,
                    request_deserializer=federated__learning__pb2.ClientRegistration.FromString,
                    response_serializer=federated__learning__pb2.RegistrationResponse.SerializeToString,
            ),
            'SendLocalResults': grpc.unary_unary_rpc_method_handler(
                    servicer.SendLocalResults,
                    request_deserializer=federated__learning__pb2.LocalResults.FromString,
                    response_serializer=federated__learning__pb2.ServerAcknowledgment.SerializeToString,
            ),
            'GetGlobalResults': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGlobalResults,
                    request_deserializer=federated__learning__pb2.GlobalResultsRequest.FromString,
                    response_serializer=federated__learning__pb2.GlobalResults.SerializeToString,
            ),
            'BroadcastGlobalModel': grpc.unary_unary_rpc_method_handler(
                    servicer.BroadcastGlobalModel,
                    request_deserializer=federated__learning__pb2.GlobalModel.FromString,
                    response_serializer=federated__learning__pb2.ClientAcknowledgment.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=federated__learning__pb2.HealthRequest.FromString,
                    response_serializer=federated__learning__pb2.HealthResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'federated_learning.FederatedLearningService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('federated_learning.FederatedLearningService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class FederatedLearningService(object):
    """Service definition for federated learning
    """

    @staticmethod
    def RegisterClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/federated_learning.FederatedLearningService/RegisterClient',
            federated__learning__pb2.ClientRegistration.SerializeToString,
            federated__learning__pb2.RegistrationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendLocalResults(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/federated_learning.FederatedLearningService/SendLocalResults',
            federated__learning__pb2.LocalResults.SerializeToString,
            federated__learning__pb2.ServerAcknowledgment.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetGlobalResults(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/federated_learning.FederatedLearningService/GetGlobalResults',
            federated__learning__pb2.GlobalResultsRequest.SerializeToString,
            federated__learning__pb2.GlobalResults.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BroadcastGlobalModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/federated_learning.FederatedLearningService/BroadcastGlobalModel',
            federated__learning__pb2.GlobalModel.SerializeToString,
            federated__learning__pb2.ClientAcknowledgment.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/federated_learning.FederatedLearningService/HealthCheck',
            federated__learning__pb2.HealthRequest.SerializeToString,
            federated__learning__pb2.HealthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
